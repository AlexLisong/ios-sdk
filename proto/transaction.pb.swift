// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: transaction.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Corepb_Transaction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Data = SwiftProtobuf.Internal.emptyData

  var vin: [Corepb_TXInput] = []

  var vout: [Corepb_TXOutput] = []

  var tip: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Corepb_TXInput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var txid: Data = SwiftProtobuf.Internal.emptyData

  var vout: Int32 = 0

  var signature: Data = SwiftProtobuf.Internal.emptyData

  var pubKey: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Corepb_TXOutput {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: Data = SwiftProtobuf.Internal.emptyData

  var pubKeyHash: Data = SwiftProtobuf.Internal.emptyData

  var contract: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "corepb"

extension Corepb_Transaction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Transaction"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "Vin"),
    3: .same(proto: "Vout"),
    4: .same(proto: "Tip"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.vin)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.vout)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.tip)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularBytesField(value: self.id, fieldNumber: 1)
    }
    if !self.vin.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vin, fieldNumber: 2)
    }
    if !self.vout.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vout, fieldNumber: 3)
    }
    if self.tip != 0 {
      try visitor.visitSingularUInt64Field(value: self.tip, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Corepb_Transaction) -> Bool {
    if self.id != other.id {return false}
    if self.vin != other.vin {return false}
    if self.vout != other.vout {return false}
    if self.tip != other.tip {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Corepb_TXInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TXInput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Txid"),
    2: .same(proto: "Vout"),
    3: .same(proto: "Signature"),
    4: .same(proto: "PubKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.txid)
      case 2: try decoder.decodeSingularInt32Field(value: &self.vout)
      case 3: try decoder.decodeSingularBytesField(value: &self.signature)
      case 4: try decoder.decodeSingularBytesField(value: &self.pubKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txid.isEmpty {
      try visitor.visitSingularBytesField(value: self.txid, fieldNumber: 1)
    }
    if self.vout != 0 {
      try visitor.visitSingularInt32Field(value: self.vout, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularBytesField(value: self.signature, fieldNumber: 3)
    }
    if !self.pubKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKey, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Corepb_TXInput) -> Bool {
    if self.txid != other.txid {return false}
    if self.vout != other.vout {return false}
    if self.signature != other.signature {return false}
    if self.pubKey != other.pubKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Corepb_TXOutput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TXOutput"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Value"),
    2: .same(proto: "PubKeyHash"),
    3: .same(proto: "Contract"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.value)
      case 2: try decoder.decodeSingularBytesField(value: &self.pubKeyHash)
      case 3: try decoder.decodeSingularStringField(value: &self.contract)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 1)
    }
    if !self.pubKeyHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.pubKeyHash, fieldNumber: 2)
    }
    if !self.contract.isEmpty {
      try visitor.visitSingularStringField(value: self.contract, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Corepb_TXOutput) -> Bool {
    if self.value != other.value {return false}
    if self.pubKeyHash != other.pubKeyHash {return false}
    if self.contract != other.contract {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
